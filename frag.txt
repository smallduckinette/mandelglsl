varying vec2 c;
uniform float color_s;
uniform float color_v;
uniform float zoom;
uniform vec2 position;
uniform float stretch;

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main() {
    vec2 local_c = (c * zoom + position) * vec2(stretch, 1);
    vec2 z = local_c;

    int i;
    for(i=0; i<1000; i++) {
        float x = (z.x * z.x - z.y * z.y) + local_c.x;
        float y = (z.y * z.x + z.x * z.y) + local_c.y;
        z.x = x;
        z.y = y;
        if((x * x + y * y) > 4.0) break;
    }

    if(i == 1000)
    {
          gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);  
    }   
    else
    {
          float log_zn = log( z.x*z.x + z.y*z.y ) / 2;
          float nu = log( log_zn / log(2) ) / log(2);
          float v = i + 1 - nu;
        
          gl_FragColor = vec4(hsv2rgb(vec3(v / 50., color_s, color_v)), 1.0);
    }
}
